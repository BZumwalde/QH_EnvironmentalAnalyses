library(googlesheets)
library(raster); library(rgdal); library(rgeos) # spatial analysis packages
library(ggplot2); library(grid) # graphing packages
install.packages("googlesheets")
install.packages("googlesheets")
library(googlesheets)
library(raster); library(rgdal); library(rgeos) # spatial analysis packages
library(ggplot2); library(grid) # graphing packages
dir.base <- "/Volumes/GoogleDrive/My Drive/LivingCollections_Phenology/"
dir.base
dir.base
path.dat <- file.path(dir.base, "Observing Lists/2018_Quercus")
maps.out <- file.path(path.dat)
path.gis <- "/Volumes/GIS/Collections" # Note: could soft-code this in, but repeating it everywhere is making it easier to search
path.dat
# -------------------------------------------------------------
# Access & format the observations
# -------------------------------------------------------------
pheno.lc <- gs_title("Phenology_Observations_GoogleForm_2018")
pheno.lc
# get the data from a particular sheet
dat.raw <- data.frame(gs_read(pheno.lc, ws="Raw Observations"))
dim(dat.raw)
summary(dat.raw[,1:5])
# Renaming some columns
names(dat.raw)[grep("OPTIONAL", names(dat.raw))] <- "Notes"
names(dat.raw)[grep("species", names(dat.raw))] <- "Species"
# Coming up with handy groups for our columns
cols.meta <- c("Timestamp", "Email.Address", "Observer", "Date.Observed", "Species", "PlantNumber", "Notes")
pheno.leaf <- names(dat.raw)[grep("leaf", tolower(names(dat.raw)))]
pheno.flower <- names(dat.raw)[grep("flower", tolower(names(dat.raw)))]
pheno.fruit <- names(dat.raw)[grep("fruit", tolower(names(dat.raw)))]
# Setting things to factors
for(i in 1:ncol(dat.raw)){
if(class(dat.raw[,i])=="character") dat.raw[,i] <- as.factor(dat.raw[,i])
}
summary(dat.raw)
cols.id <- grep("accession", names(dat.raw))
dat.clean <- dat.raw[,c(cols.meta[!cols.meta=="PlantNumber"], pheno.leaf, pheno.flower, pheno.fruit)]
dat.clean$PlantNumber <- as.factor(apply(dat.raw[,cols.id], 1, FUN=function(x) {x[which(!is.na(x))][1]})) # Get the PlantNumber
dat.clean$Timestamp <- strptime(dat.clean$Timestamp, format="%m/%d/%Y %H:%M:%S")
dat.clean$Date.Observed <- as.Date(dat.clean$Date.Observed, format="%m/%d/%Y")
dat.clean <- dat.clean[,c(cols.meta, pheno.leaf, pheno.flower, pheno.fruit)] # Just re-organizing to how I like to see things
summary(dat.clean)
dim(dat.clean)
# Get rid of observations that have TEST in them or are before our last phenology training
rows.remove <- c(which(is.na(dat.clean$Species)), grep("TEST", toupper(dat.clean$NOTES)), grep("TEST", toupper(dat.clean$Observer)), which(dat.clean$Date.Observed < as.Date("2018-03-09")))
rows.remove
dat.clean[(1:nrow(dat.clean) %in% rows.remove),]
1:nrow(dat.clean)
rows.remove
(1:nrow(dat.clean) %in% rows.remove)
dat.clean[(1:nrow(dat.clean) %in% rows.remove),]
# Get rid of observations that have TEST in them or are before our last phenology training
rows.date <- which(dat.clean$Date.Observed < as.Date("2018-03-09"))
rows.remove <- c(which(is.na(dat.clean$Species)), grep("TEST", toupper(dat.clean$NOTES)), grep("TEST", toupper(dat.clean$Observer)) )
rows.date
rows.remove
rows.date <- which(dat.clean$Date.Observed < as.Date("2018-03-09"))
rows.date
TEST
"TEST"
year(dat.clean$Date.Observed)==0018
library(lubridate)
install.packages(lubridate)
install.packages("lubridate")
library(lubridate)
year(dat.clean$Date.Observed)==0018
dat.clean[year(dat.clean$Date.Observed)==0018,"Date.Observed"]
# We had some rows where the year got entered wrong as 0018 rather than 2018
date.wrong <- dat.clean[year(dat.clean$Date.Observed)==0018,"Date.Observed"]
# We had some rows where the year got entered wrong as 0018 rather than 2018
date.wrong <- dat.clean[year(dat.clean$Date.Observed)==0018,"Date.Observed"]
date.wrong
day(yr.wrong)
# We had some rows where the year got entered wrong as 0018 rather than 2018
yr.wrong <- dat.clean[year(dat.clean$Date.Observed)==0018,"Date.Observed"]
day(yr.wrong)
month(yr.wrong)
paste(2018, month(yr.wrong), day(yr.wrong), sep="-")
as.Date(paste(2018, month(yr.wrong), day(yr.wrong), sep="-"))
dat.clean[dat.clean$Date.Observed==yr.wrong,"Date.Observed"] <- as.Date(paste(2018, month(yr.wrong), day(yr.wrong), sep="-"))
dat.clean[year(dat.clean$Date.Observed)==0018,"Date.Observed"]
# We had some rows where the year got entered wrong as 0018 rather than 2018
yr.wrong <- dat.clean[year(dat.clean$Date.Observed)==0018,"Date.Observed"]
dat.clean <- droplevels(dat.clean) # Get rid of unused levels
summary(dat.clean)
install.packages("MsatAllele")
install.packages("Momocs")
libary(Momocs)
librarry(Momocs)
library(Momocs)
hqual
?hqual
?Momocs
#*******************************************#
#Pulling Bioclim data and pop coordinates together
#*******************************************#
library(stats); library(dismo); library(maptools); library(rgdal)
#For PCA and correlations
#install_github("vqv/ggbiplot")
library(tibble);library(scales);library(devtools);library(ggbiplot);library(ggplot2)
#install_github("vqv/ggbiplot") # must be installed after devtools is loaded in
library("FactoMineR")
library("factoextra")
library(ggrepel)
setwd("E:/Zumwalde/havardii_environmental/data")
#*******************************************#
#Read in data and building matrix
#*******************************************#
# http://worldclim.org/version2 is where data was pulled from
files <- list.files("WORLDCLIM", pattern='tif', full.names=TRUE) #Load climate files
bioclim2.5 <- stack(files) #Create a raster stack
#dim(bioclim30s) #Looks at data structure
#Extract data for QH Pops
QHloc_Final <- read.csv("QH_Pops_Final.csv", sep=",", header=T, stringsAsFactors = FALSE)
data(wrld_simpl)
climateFinal <- climate <- extract(bioclim2.5, QHloc_Final[,1:2]) #Extract climate data for locations
#Renaming columns and rows
bioclim_names <- c("BIO1","BIO2","BIO3","BIO4","BIO5","BIO6","BIO7","BIO8","BIO9","BIO10","BIO11","BIO12","BIO13","BIO14","BIO15","BIO16","BIO17","BIO18","BIO19")
colnames(climateFinal) <- bioclim_names
rownames(climateFinal) <-  c("E1", "E2", "E3", "E4", "E5", "E6", "E7", "E10", "E13", "E14", "W1", "W2", "W3", "W4", "W5", "W6", "W7", "W8", "W9", "W10", "W11", "W12", "WAUX3")
#*******************************************#
# Testing for Correlation
#*******************************************#
library("Hmisc")
corrclimFinal <- cor(climateFinal)
round(corrclimFinal,3)
cor(climate, use = "complete.obs")
corrclimFinal2 <- rcorr(as.matrix(corrclimFinal))
corrclimFinal2
corrclimFinal2$r
corrclimFinal2$P
flattenCorrMatrix <- function(cormat, pmat) {
ut <- upper.tri(cormat)
data.frame(
row = rownames(cormat)[row(cormat)[ut]],
column = rownames(cormat)[col(cormat)[ut]],
cor  =(cormat)[ut],
p = pmat[ut]
)
}
QHcorrmat_Final <- flattenCorrMatrix(corrclimFinal2$r, corrclimFinal2$P)
#write.csv(QHcorrmat_Final, file = "corrmat_Final.csv")
symbols_Final <- symnum(corrclimFinal, abbr.colnames = FALSE)
#write.csv(symbols_Final, file = "corrmatsymbols_Final.csv")
#*******************************************#
#PCA
#*******************************************#
#****With Correlated variables Final!****#
climateFinal2 <- climateFinal[,-c(1,5,6,13,16,18)] #biological
climateFinal.pca2 <- prcomp(climateFinal2, center = TRUE,scale. = TRUE)
climateFinal.pca2  #loadings
climate.region_Final <- c(rep("E",10), rep("W",13))
ggbiplot(climateFinal.pca2, ellipse = FALSE, obs.scale = 1.5, var.scale = 1.5, varname.adjust = 3.2,
var.axes = TRUE, labels= NULL, groups=climate.region_Final)+
geom_text_repel(aes(label = rownames(climateFinal)), nudge_x = 0.1, size=4)+
scale_colour_manual(values = c("red", "blue"))+
geom_point(aes(shape=climate.region_Final, color=climate.region_Final, size=3))+
theme_light(base_size = 15) +
theme(plot.title = element_text(hjust = 0.5))+
theme(legend.position = "bottom") +
theme(legend.position = "none")
#Final Figure with Axes changed
ggbiplot(climateFinal.pca2, ellipse = FALSE, obs.scale = 1.25, var.scale = 1.5, varname.adjust = 1.5,
var.axes = TRUE, labels= NULL, groups=climate.region_Final)+
geom_text_repel(aes(label = rownames(climateFinal)), nudge_x = 0.25, nudge_y = 0.1, size=4)+
scale_colour_manual(values = c("red", "blue"))+
geom_point(aes(shape=climate.region_Final, color=climate.region_Final, size=3))+
geom_hline(yintercept = 0, color = "black")+
geom_vline(xintercept = 0, color = "black")+
xlab(expression("Axis 1 (42.4%)")) +
ylab(expression("Axis 2 (21.5%)"))+
ggtitle("Environmental") +
theme_classic(base_size = 15) +
theme(plot.title = element_text(hjust = 0.5))+
theme(panel.border = element_rect(fill="transparent", colour = "black")) +
theme(legend.position = "none") +
scale_x_reverse()
#*******************************************#
#Read in data and building matrix
#*******************************************#
setwd("E:/Zumwalde/havardii_environmental/data")
#*******************************************#
#Read in data and building matrix
#*******************************************#
setwd("E:/Zumwalde/havardii_environmental/data")
setwd("~/Desktop/QH_Environ")
#setwd("E:/Zumwalde/havardii_environmental/data")
setwd("~/Desktop/QH_Environ")
# http://worldclim.org/version2 is where data was pulled from
files <- list.files("WORLDCLIM", pattern='tif', full.names=TRUE) #Load climate files
bioclim2.5 <- stack(files) #Create a raster stack
#dim(bioclim30s) #Looks at data structure
#Extract data for QH Pops
setwd("~/Documents/GitHub/QH_EnvironmentalAnalyses")
setwd("~/Documents/GitHub/QH_EnvironmentalAnalyses")
QHloc_Final <- read.csv("QH_Pops_Final.csv", sep=",", header=T, stringsAsFactors = FALSE)
data(wrld_simpl)
climateFinal <- climate <- extract(bioclim2.5, QHloc_Final[,1:2]) #Extract climate data for locations
#Renaming columns and rows
bioclim_names <- c("BIO1","BIO2","BIO3","BIO4","BIO5","BIO6","BIO7","BIO8","BIO9","BIO10","BIO11","BIO12","BIO13","BIO14","BIO15","BIO16","BIO17","BIO18","BIO19")
colnames(climateFinal) <- bioclim_names
rownames(climateFinal) <-  c("E1", "E2", "E3", "E4", "E5", "E6", "E7", "E10", "E13", "E14", "W1", "W2", "W3", "W4", "W5", "W6", "W7", "W8", "W9", "W10", "W11", "W12", "WAUX3")
#****With Correlated variables Final!****#
climateFinal2 <- climateFinal[,-c(1,5,6,13,16,18)] #biological
climateFinal.pca2 <- prcomp(climateFinal2, center = TRUE,scale. = TRUE)
climateFinal.pca2  #loadings
climate.region_Final <- c(rep("E",10), rep("W",13))
ggbiplot(climateFinal.pca2, ellipse = FALSE, obs.scale = 1.5, var.scale = 1.5, varname.adjust = 3.2,
var.axes = TRUE, labels= NULL, groups=climate.region_Final)+
geom_text_repel(aes(label = rownames(climateFinal)), nudge_x = 0.1, size=4)+
scale_colour_manual(values = c("red", "blue"))+
geom_point(aes(shape=climate.region_Final, color=climate.region_Final, size=3))+
theme_light(base_size = 15) +
theme(plot.title = element_text(hjust = 0.5))+
theme(legend.position = "bottom") +
theme(legend.position = "none")
#Final Figure with Axes changed
ggbiplot(climateFinal.pca2, ellipse = FALSE, obs.scale = 1.25, var.scale = 1.5, varname.adjust = 1.5,
var.axes = TRUE, labels= NULL, groups=climate.region_Final)+
geom_text_repel(aes(label = rownames(climateFinal)), nudge_x = 0.25, nudge_y = 0.1, size=4)+
scale_colour_manual(values = c("red", "blue"))+
geom_point(aes(shape=climate.region_Final, color=climate.region_Final, size=3))+
geom_hline(yintercept = 0, color = "black")+
geom_vline(xintercept = 0, color = "black")+
xlab(expression("Axis 1 (42.4%)")) +
ylab(expression("Axis 2 (21.5%)"))+
ggtitle("Environmental") +
theme_classic(base_size = 15) +
theme(plot.title = element_text(hjust = 0.5))+
theme(panel.border = element_rect(fill="transparent", colour = "black")) +
theme(legend.position = "none") +
scale_x_reverse()
#Final Figure with Axes changed
ggbiplot(climateFinal.pca2, ellipse = FALSE, obs.scale = 1.25, var.scale = 1.5, varname.adjust = 1.5,
var.axes = TRUE, labels= NULL, groups=climate.region_Final)+
geom_text_repel(aes(label = rownames(climateFinal)), nudge_x = 0.25, nudge_y = 0.1, size=4)+
scale_colour_manual(values = c("red", "blue"))+
geom_point(aes(shape=climate.region_Final, color=climate.region_Final, size=3))+
geom_hline(yintercept = 0, color = "black")+
geom_vline(xintercept = 0, color = "black")+
xlab(expression("Axis 1 (42.4%)")) +
ylab(expression("Axis 2 (21.5%)"))+
ggtitle("Environmental") +
theme_classic(base_size = 14) +
theme(plot.title = element_text(hjust = 0.5))+
theme(panel.border = element_rect(fill="transparent", colour = "black")) +
theme(legend.position = "none") +
scale_x_reverse()
